"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fpactWith = exports.xpactWith = exports.pactWith = void 0;
const pactV3 = __importStar(require("@pact-foundation/pact"));
const path = __importStar(require("path"));
const applyDefaults = (options) => ({
    dir: path.resolve(process.cwd(), 'pact/pacts'),
    ...options,
});
const setupProvider = (options) => {
    const pactDescribe = (describeDescription, fn) => {
        describe(describeDescription, () => {
            const provider = new pactV3.PactV3(options);
            const execute = (testDescription, executeTest) => {
                it(testDescription, () => provider.executeTest(executeTest));
            };
            fn({ provider, execute });
        });
    };
    return pactDescribe;
};
const jestPactWrapper = (options, tests) => {
    const pactTestTimeout = options.timeout || 30000;
    describe(`with ${pactTestTimeout} ms timeout for Pact`, () => {
        let originalTimeout;
        beforeAll(() => {
            originalTimeout = global.jasmine
                ? global.jasmine.DEFAULT_TIMEOUT_INTERVAL
                : 5000;
            jest.setTimeout(pactTestTimeout);
        });
        afterAll(() => {
            jest.setTimeout(originalTimeout);
        });
        tests(setupProvider(applyDefaults(options)));
    });
};
const describeString = (options) => `Pact between ${options.consumer} and ${options.provider}`;
const pactWith = (options, tests) => describe(describeString(options), () => jestPactWrapper(options, tests));
exports.pactWith = pactWith;
const xpactWith = (options, tests) => xdescribe(describeString(options), () => jestPactWrapper(options, tests));
exports.xpactWith = xpactWith;
const fpactWith = (options, tests) => fdescribe(describeString(options), () => jestPactWrapper(options, tests));
exports.fpactWith = fpactWith;
//# sourceMappingURL=index.js.map