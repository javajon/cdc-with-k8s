"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:no-unused-expression no-empty */
var chai_1 = __importDefault(require("chai"));
var chai_as_promised_1 = __importDefault(require("chai-as-promised"));
var sinon_chai_1 = __importDefault(require("sinon-chai"));
var axios_1 = __importDefault(require("axios"));
var net = require("net");
process.env.ENABLE_FEATURE_V4 = 'true';
// eslint-disable-next-line import/first
var v4_1 = require("./v4");
var expect = chai_1.default.expect;
chai_1.default.use(sinon_chai_1.default);
chai_1.default.use(chai_as_promised_1.default);
describe('V4 Pact', function () {
    var pact;
    beforeEach(function () {
        pact = new v4_1.PactV4({
            consumer: 'v4consumer',
            provider: 'v4provider',
        });
    });
    describe('HTTP req/res contract', function () {
        it('generates a pact', function () {
            return pact
                .addInteraction()
                .given('some state')
                .given('a second state')
                .uponReceiving('a standard HTTP req/res')
                .withRequest('POST', '/', function (builder) {
                builder
                    .jsonBody({
                    foo: 'bar',
                })
                    .headers({
                    'x-foo': 'x-bar',
                });
            })
                .willRespondWith(200, function (builder) {
                builder
                    .jsonBody({
                    foo: 'bar',
                })
                    .headers({
                    'x-foo': 'x-bar',
                });
            })
                .executeTest(function (server) { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, axios_1.default.post(server.url, {
                            foo: 'bar',
                        }, {
                            headers: {
                                'x-foo': 'x-bar',
                            },
                        })];
                });
            }); });
        });
    });
    describe('Plugin test', function () {
        describe('Using the MATT plugin', function () {
            var parseMattMessage = function (raw) {
                return raw.replace(/(MATT)+/g, '').trim();
            };
            var generateMattMessage = function (raw) { return "MATT".concat(raw, "MATT"); };
            describe('HTTP interface', function () {
                it('generates a pact', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var mattRequest, mattResponse;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                mattRequest = "{\"request\": {\"body\": \"hello\"}}";
                                mattResponse = "{\"response\":{\"body\":\"world\"}}";
                                return [4 /*yield*/, pact
                                        .addInteraction()
                                        .given('the Matt protocol exists')
                                        .uponReceiving('an HTTP request to /matt')
                                        .usingPlugin({
                                        plugin: 'matt',
                                        version: '0.1.1',
                                    })
                                        .withRequest('POST', '/matt', function (builder) {
                                        builder.pluginContents('application/matt', mattRequest);
                                    })
                                        .willRespondWith(200, function (builder) {
                                        builder.pluginContents('application/matt', mattResponse);
                                    })
                                        .executeTest(function (mockserver) {
                                        return axios_1.default
                                            .request({
                                            baseURL: mockserver.url,
                                            headers: {
                                                'content-type': 'application/matt',
                                                Accept: 'application/matt',
                                            },
                                            data: generateMattMessage('hello'),
                                            method: 'POST',
                                            url: '/matt',
                                        })
                                            .then(function (res) {
                                            expect(parseMattMessage(res.data)).to.eq('world');
                                        });
                                    })];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
            describe('Synchronous Message (TCP) ', function () {
                describe('with MATT protocol', function () {
                    var HOST = '127.0.0.1';
                    var sendMattMessageTCP = function (message, host, port) {
                        var socket = net.connect({
                            port: port,
                            host: host,
                        });
                        var res = socket.write("".concat(generateMattMessage(message), "\n"));
                        if (!res) {
                            throw Error('unable to connect to host');
                        }
                        return new Promise(function (resolve) {
                            socket.on('data', function (data) {
                                resolve(parseMattMessage(data.toString()));
                            });
                        });
                    };
                    it('generates a pact', function () {
                        var mattMessage = "{\"request\": {\"body\": \"hellotcp\"}, \"response\":{\"body\":\"tcpworld\"}}";
                        return pact
                            .addSynchronousInteraction('a MATT message')
                            .usingPlugin({
                            plugin: 'matt',
                            version: '0.1.1',
                        })
                            .withPluginContents(mattMessage, 'application/matt')
                            .startTransport('matt', HOST)
                            .executeTest(function (tc) { return __awaiter(void 0, void 0, void 0, function () {
                            var message;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, sendMattMessageTCP('hellotcp', HOST, tc.port)];
                                    case 1:
                                        message = _a.sent();
                                        expect(message).to.eq('tcpworld');
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    });
                });
            });
        });
    });
});
//# sourceMappingURL=pact.integration.spec.js.map