"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contentTypeFromHeaders = exports.setResponseDetails = exports.setRequestDetails = void 0;
var ramda_1 = require("ramda");
var MatchersV3 = __importStar(require("./matchers"));
var setRequestDetails = function (interaction, req) {
    interaction.withRequest(req.method, MatchersV3.matcherValueOrString(req.path));
    (0, ramda_1.forEachObjIndexed)(function (v, k) {
        if (Array.isArray(v)) {
            v.forEach(function (header, index) {
                interaction.withRequestHeader(k, index, MatchersV3.matcherValueOrString(header));
            });
        }
        else {
            interaction.withRequestHeader(k, 0, MatchersV3.matcherValueOrString(v));
        }
    }, req.headers);
    (0, ramda_1.forEachObjIndexed)(function (v, k) {
        if (Array.isArray(v)) {
            v.forEach(function (vv, i) {
                interaction.withQuery(k, i, MatchersV3.matcherValueOrString(vv));
            });
        }
        else {
            interaction.withQuery(k, 0, MatchersV3.matcherValueOrString(v));
        }
    }, req.query);
};
exports.setRequestDetails = setRequestDetails;
var setResponseDetails = function (interaction, res) {
    interaction.withStatus(res.status);
    (0, ramda_1.forEachObjIndexed)(function (v, k) {
        if (Array.isArray(v)) {
            v.forEach(function (header, index) {
                interaction.withResponseHeader(k, index, MatchersV3.matcherValueOrString(header));
            });
        }
        else {
            interaction.withResponseHeader(k, 0, MatchersV3.matcherValueOrString(v));
        }
    }, res.headers);
};
exports.setResponseDetails = setResponseDetails;
// TODO: this might need to consider an array of values
var contentTypeFromHeaders = function (headers, defaultContentType) {
    var contentType = defaultContentType;
    (0, ramda_1.forEachObjIndexed)(function (v, k) {
        if ("".concat(k).toLowerCase() === 'content-type') {
            contentType = MatchersV3.matcherValueOrString(v);
        }
    }, headers || {});
    return contentType;
};
exports.contentTypeFromHeaders = contentTypeFromHeaders;
//# sourceMappingURL=ffi.js.map